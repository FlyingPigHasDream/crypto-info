version: '3.8'

services:
  # 应用服务
  crypto-info:
    build:
      context: ..
      dockerfile: build/Dockerfile
    container_name: crypto-info
    ports:
      - "8080:8080"
      - "9090:9090"  # gRPC端口
    environment:
      - CRYPTO_APP_ENV=development
      - CRYPTO_DATABASE_REDIS_HOST=redis
      - CRYPTO_DATABASE_REDIS_PORT=6379
      - CRYPTO_LOG_LEVEL=debug
    depends_on:
      - redis
    volumes:
      - ../configs:/app/configs:ro
      - ../logs:/app/logs
    networks:
      - crypto-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ../configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - crypto-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ../configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - crypto-network
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ../configs/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - crypto-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger链路追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: crypto-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - crypto-network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: crypto-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../configs/ssl:/etc/nginx/ssl:ro
    depends_on:
      - crypto-info
    networks:
      - crypto-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  crypto-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16