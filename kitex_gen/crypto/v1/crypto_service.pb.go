// Code generated by Kitex v0.14.1. DO NOT EDIT.

package cryptov1

import (
	"context"

	"github.com/cloudwego/prutal"
)

// 请求和响应消息定义
type GetPriceRequest struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"` // 加密货币符号
}

func (x *GetPriceRequest) Reset() { *x = GetPriceRequest{} }

func (x *GetPriceRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetPriceRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetPriceRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetBTCPriceRequest struct {
}

func (x *GetBTCPriceRequest) Reset() { *x = GetBTCPriceRequest{} }

func (x *GetBTCPriceRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetBTCPriceRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

type GetPriceResponse struct {
	Symbol    string  `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
	Currency  string  `protobuf:"bytes,3,opt,name=currency" json:"currency,omitempty"`
	Timestamp int64   `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Source    string  `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
	Success   bool    `protobuf:"varint,6,opt,name=success" json:"success,omitempty"`
	Message   string  `protobuf:"bytes,7,opt,name=message" json:"message,omitempty"`
}

func (x *GetPriceResponse) Reset() { *x = GetPriceResponse{} }

func (x *GetPriceResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetPriceResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetPriceResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetPriceResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetPriceResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetPriceResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetPriceResponse) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *GetPriceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetPriceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetVolumeAnalysisRequest struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Days   int32  `protobuf:"varint,2,opt,name=days" json:"days,omitempty"`
}

func (x *GetVolumeAnalysisRequest) Reset() { *x = GetVolumeAnalysisRequest{} }

func (x *GetVolumeAnalysisRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetVolumeAnalysisRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetVolumeAnalysisRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetVolumeAnalysisRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type GetVolumeAnalysisResponse struct {
	Symbol        string        `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	VolumeData    []*VolumeData `protobuf:"bytes,2,rep,name=volume_data" json:"volume_data,omitempty"`
	AverageVolume float64       `protobuf:"fixed64,3,opt,name=average_volume" json:"average_volume,omitempty"`
	TotalVolume   float64       `protobuf:"fixed64,4,opt,name=total_volume" json:"total_volume,omitempty"`
	Success       bool          `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
	Message       string        `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
}

func (x *GetVolumeAnalysisResponse) Reset() { *x = GetVolumeAnalysisResponse{} }

func (x *GetVolumeAnalysisResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetVolumeAnalysisResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetVolumeAnalysisResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetVolumeAnalysisResponse) GetVolumeData() []*VolumeData {
	if x != nil {
		return x.VolumeData
	}
	return nil
}

func (x *GetVolumeAnalysisResponse) GetAverageVolume() float64 {
	if x != nil {
		return x.AverageVolume
	}
	return 0
}

func (x *GetVolumeAnalysisResponse) GetTotalVolume() float64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *GetVolumeAnalysisResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetVolumeAnalysisResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VolumeData struct {
	Date   string  `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
	Volume float64 `protobuf:"fixed64,2,opt,name=volume" json:"volume,omitempty"`
	Price  float64 `protobuf:"fixed64,3,opt,name=price" json:"price,omitempty"`
}

func (x *VolumeData) Reset() { *x = VolumeData{} }

func (x *VolumeData) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *VolumeData) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *VolumeData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *VolumeData) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *VolumeData) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type GetMarketVolumeFluctuationRequest struct {
	Symbols []string `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	Days    int32    `protobuf:"varint,2,opt,name=days" json:"days,omitempty"`
}

func (x *GetMarketVolumeFluctuationRequest) Reset() { *x = GetMarketVolumeFluctuationRequest{} }

func (x *GetMarketVolumeFluctuationRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetMarketVolumeFluctuationRequest) Unmarshal(in []byte) error {
	return prutal.Unmarshal(in, x)
}

func (x *GetMarketVolumeFluctuationRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *GetMarketVolumeFluctuationRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type GetMarketVolumeFluctuationResponse struct {
	Fluctuations []*MarketVolumeFluctuation `protobuf:"bytes,1,rep,name=fluctuations" json:"fluctuations,omitempty"`
	Success      bool                       `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message      string                     `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (x *GetMarketVolumeFluctuationResponse) Reset() { *x = GetMarketVolumeFluctuationResponse{} }

func (x *GetMarketVolumeFluctuationResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetMarketVolumeFluctuationResponse) Unmarshal(in []byte) error {
	return prutal.Unmarshal(in, x)
}

func (x *GetMarketVolumeFluctuationResponse) GetFluctuations() []*MarketVolumeFluctuation {
	if x != nil {
		return x.Fluctuations
	}
	return nil
}

func (x *GetMarketVolumeFluctuationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetMarketVolumeFluctuationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MarketVolumeFluctuation struct {
	Symbol                string  `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	CurrentVolume         float64 `protobuf:"fixed64,2,opt,name=current_volume" json:"current_volume,omitempty"`
	PreviousVolume        float64 `protobuf:"fixed64,3,opt,name=previous_volume" json:"previous_volume,omitempty"`
	FluctuationPercentage float64 `protobuf:"fixed64,4,opt,name=fluctuation_percentage" json:"fluctuation_percentage,omitempty"`
	Trend                 string  `protobuf:"bytes,5,opt,name=trend" json:"trend,omitempty"`
}

func (x *MarketVolumeFluctuation) Reset() { *x = MarketVolumeFluctuation{} }

func (x *MarketVolumeFluctuation) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *MarketVolumeFluctuation) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *MarketVolumeFluctuation) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketVolumeFluctuation) GetCurrentVolume() float64 {
	if x != nil {
		return x.CurrentVolume
	}
	return 0
}

func (x *MarketVolumeFluctuation) GetPreviousVolume() float64 {
	if x != nil {
		return x.PreviousVolume
	}
	return 0
}

func (x *MarketVolumeFluctuation) GetFluctuationPercentage() float64 {
	if x != nil {
		return x.FluctuationPercentage
	}
	return 0
}

func (x *MarketVolumeFluctuation) GetTrend() string {
	if x != nil {
		return x.Trend
	}
	return ""
}

type GetVolumeComparisonRequest struct {
	Symbols    []string `protobuf:"bytes,1,rep,name=symbols" json:"symbols,omitempty"`
	TimePeriod string   `protobuf:"bytes,2,opt,name=time_period" json:"time_period,omitempty"`
}

func (x *GetVolumeComparisonRequest) Reset() { *x = GetVolumeComparisonRequest{} }

func (x *GetVolumeComparisonRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetVolumeComparisonRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetVolumeComparisonRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *GetVolumeComparisonRequest) GetTimePeriod() string {
	if x != nil {
		return x.TimePeriod
	}
	return ""
}

type GetVolumeComparisonResponse struct {
	Comparisons []*VolumeComparison `protobuf:"bytes,1,rep,name=comparisons" json:"comparisons,omitempty"`
	Success     bool                `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message     string              `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (x *GetVolumeComparisonResponse) Reset() { *x = GetVolumeComparisonResponse{} }

func (x *GetVolumeComparisonResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetVolumeComparisonResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetVolumeComparisonResponse) GetComparisons() []*VolumeComparison {
	if x != nil {
		return x.Comparisons
	}
	return nil
}

func (x *GetVolumeComparisonResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetVolumeComparisonResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VolumeComparison struct {
	Symbol      string  `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Volume_24H  float64 `protobuf:"fixed64,2,opt,name=volume_24h" json:"volume_24h,omitempty"`
	Volume_7D   float64 `protobuf:"fixed64,3,opt,name=volume_7d" json:"volume_7d,omitempty"`
	Volume_30D  float64 `protobuf:"fixed64,4,opt,name=volume_30d" json:"volume_30d,omitempty"`
	MarketShare float64 `protobuf:"fixed64,5,opt,name=market_share" json:"market_share,omitempty"`
}

func (x *VolumeComparison) Reset() { *x = VolumeComparison{} }

func (x *VolumeComparison) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *VolumeComparison) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *VolumeComparison) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *VolumeComparison) GetVolume_24H() float64 {
	if x != nil {
		return x.Volume_24H
	}
	return 0
}

func (x *VolumeComparison) GetVolume_7D() float64 {
	if x != nil {
		return x.Volume_7D
	}
	return 0
}

func (x *VolumeComparison) GetVolume_30D() float64 {
	if x != nil {
		return x.Volume_30D
	}
	return 0
}

func (x *VolumeComparison) GetMarketShare() float64 {
	if x != nil {
		return x.MarketShare
	}
	return 0
}

type GetTopVolumeCoinsRequest struct {
	Limit      int32  `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	TimePeriod string `protobuf:"bytes,2,opt,name=time_period" json:"time_period,omitempty"`
}

func (x *GetTopVolumeCoinsRequest) Reset() { *x = GetTopVolumeCoinsRequest{} }

func (x *GetTopVolumeCoinsRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetTopVolumeCoinsRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetTopVolumeCoinsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetTopVolumeCoinsRequest) GetTimePeriod() string {
	if x != nil {
		return x.TimePeriod
	}
	return ""
}

type GetTopVolumeCoinsResponse struct {
	Coins   []*TopVolumeCoin `protobuf:"bytes,1,rep,name=coins" json:"coins,omitempty"`
	Success bool             `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (x *GetTopVolumeCoinsResponse) Reset() { *x = GetTopVolumeCoinsResponse{} }

func (x *GetTopVolumeCoinsResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetTopVolumeCoinsResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetTopVolumeCoinsResponse) GetCoins() []*TopVolumeCoin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *GetTopVolumeCoinsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTopVolumeCoinsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TopVolumeCoin struct {
	Symbol    string  `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Name      string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Volume    float64 `protobuf:"fixed64,3,opt,name=volume" json:"volume,omitempty"`
	Price     float64 `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
	MarketCap float64 `protobuf:"fixed64,5,opt,name=market_cap" json:"market_cap,omitempty"`
	Rank      int32   `protobuf:"varint,6,opt,name=rank" json:"rank,omitempty"`
}

func (x *TopVolumeCoin) Reset() { *x = TopVolumeCoin{} }

func (x *TopVolumeCoin) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *TopVolumeCoin) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *TopVolumeCoin) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TopVolumeCoin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopVolumeCoin) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TopVolumeCoin) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TopVolumeCoin) GetMarketCap() float64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *TopVolumeCoin) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type HealthCheckRequest struct {
}

func (x *HealthCheckRequest) Reset() { *x = HealthCheckRequest{} }

func (x *HealthCheckRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *HealthCheckRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

type HealthCheckResponse struct {
	Status    string            `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Message   string            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Timestamp int64             `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Details   map[string]string `protobuf:"bytes,4,rep,name=details" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *HealthCheckResponse) Reset() { *x = HealthCheckResponse{} }

func (x *HealthCheckResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *HealthCheckResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HealthCheckResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HealthCheckResponse) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

type CryptoPriceService interface {
	GetPrice(ctx context.Context, req *GetPriceRequest) (res *GetPriceResponse, err error)
	GetBTCPrice(ctx context.Context, req *GetBTCPriceRequest) (res *GetPriceResponse, err error)
}

type CryptoVolumeService interface {
	GetVolumeAnalysis(ctx context.Context, req *GetVolumeAnalysisRequest) (res *GetVolumeAnalysisResponse, err error)
	GetMarketVolumeFluctuation(ctx context.Context, req *GetMarketVolumeFluctuationRequest) (res *GetMarketVolumeFluctuationResponse, err error)
	GetVolumeComparison(ctx context.Context, req *GetVolumeComparisonRequest) (res *GetVolumeComparisonResponse, err error)
	GetTopVolumeCoins(ctx context.Context, req *GetTopVolumeCoinsRequest) (res *GetTopVolumeCoinsResponse, err error)
}

type HealthService interface {
	Check(ctx context.Context, req *HealthCheckRequest) (res *HealthCheckResponse, err error)
}
