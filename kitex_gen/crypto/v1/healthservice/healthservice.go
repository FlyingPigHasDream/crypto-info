// Code generated by Kitex v0.14.1. DO NOT EDIT.

package healthservice

import (
	"context"
	cryptov1 "crypto-info/kitex_gen/crypto/v1"
	v1 "crypto-info/kitex_gen/crypto/v1"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Check": kitex.NewMethodInfo(
		checkHandler,
		newCheckArgs,
		newCheckResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	healthServiceServiceInfo                = NewServiceInfo()
	healthServiceServiceInfoForClient       = NewServiceInfoForClient()
	healthServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return healthServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return healthServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return healthServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "HealthService"
	handlerType := (*cryptov1.HealthService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "crypto.v1",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func checkHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(v1.HealthCheckRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(cryptov1.HealthService).Check(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckArgs:
		success, err := handler.(cryptov1.HealthService).Check(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckArgs() interface{} {
	return &CheckArgs{}
}

func newCheckResult() interface{} {
	return &CheckResult{}
}

type CheckArgs struct {
	Req *v1.HealthCheckRequest
}

func (p *CheckArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckArgs) Unmarshal(in []byte) error {
	msg := new(v1.HealthCheckRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckArgs_Req_DEFAULT *v1.HealthCheckRequest

func (p *CheckArgs) GetReq() *v1.HealthCheckRequest {
	if !p.IsSetReq() {
		return CheckArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckResult struct {
	Success *v1.HealthCheckResponse
}

var CheckResult_Success_DEFAULT *v1.HealthCheckResponse

func (p *CheckResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckResult) Unmarshal(in []byte) error {
	msg := new(v1.HealthCheckResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckResult) GetSuccess() *v1.HealthCheckResponse {
	if !p.IsSetSuccess() {
		return CheckResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckResult) SetSuccess(x interface{}) {
	p.Success = x.(*v1.HealthCheckResponse)
}

func (p *CheckResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Check(ctx context.Context, Req *v1.HealthCheckRequest) (r *v1.HealthCheckResponse, err error) {
	var _args CheckArgs
	_args.Req = Req
	var _result CheckResult
	if err = p.c.Call(ctx, "Check", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
