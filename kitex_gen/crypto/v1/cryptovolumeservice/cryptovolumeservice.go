// Code generated by Kitex v0.14.1. DO NOT EDIT.

package cryptovolumeservice

import (
	"context"
	cryptov1 "crypto-info/kitex_gen/crypto/v1"
	v1 "crypto-info/kitex_gen/crypto/v1"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "github.com/cloudwego/prutal"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetVolumeAnalysis": kitex.NewMethodInfo(
		getVolumeAnalysisHandler,
		newGetVolumeAnalysisArgs,
		newGetVolumeAnalysisResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMarketVolumeFluctuation": kitex.NewMethodInfo(
		getMarketVolumeFluctuationHandler,
		newGetMarketVolumeFluctuationArgs,
		newGetMarketVolumeFluctuationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetVolumeComparison": kitex.NewMethodInfo(
		getVolumeComparisonHandler,
		newGetVolumeComparisonArgs,
		newGetVolumeComparisonResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetTopVolumeCoins": kitex.NewMethodInfo(
		getTopVolumeCoinsHandler,
		newGetTopVolumeCoinsArgs,
		newGetTopVolumeCoinsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	cryptoVolumeServiceServiceInfo                = NewServiceInfo()
	cryptoVolumeServiceServiceInfoForClient       = NewServiceInfoForClient()
	cryptoVolumeServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return cryptoVolumeServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return cryptoVolumeServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return cryptoVolumeServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CryptoVolumeService"
	handlerType := (*cryptov1.CryptoVolumeService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "crypto.v1",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.14.1",
		Extra:           extra,
	}
	return svcInfo
}

func getVolumeAnalysisHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(v1.GetVolumeAnalysisRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(cryptov1.CryptoVolumeService).GetVolumeAnalysis(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetVolumeAnalysisArgs:
		success, err := handler.(cryptov1.CryptoVolumeService).GetVolumeAnalysis(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVolumeAnalysisResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetVolumeAnalysisArgs() interface{} {
	return &GetVolumeAnalysisArgs{}
}

func newGetVolumeAnalysisResult() interface{} {
	return &GetVolumeAnalysisResult{}
}

type GetVolumeAnalysisArgs struct {
	Req *v1.GetVolumeAnalysisRequest
}

func (p *GetVolumeAnalysisArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetVolumeAnalysisArgs) Unmarshal(in []byte) error {
	msg := new(v1.GetVolumeAnalysisRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVolumeAnalysisArgs_Req_DEFAULT *v1.GetVolumeAnalysisRequest

func (p *GetVolumeAnalysisArgs) GetReq() *v1.GetVolumeAnalysisRequest {
	if !p.IsSetReq() {
		return GetVolumeAnalysisArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVolumeAnalysisArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVolumeAnalysisArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetVolumeAnalysisResult struct {
	Success *v1.GetVolumeAnalysisResponse
}

var GetVolumeAnalysisResult_Success_DEFAULT *v1.GetVolumeAnalysisResponse

func (p *GetVolumeAnalysisResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetVolumeAnalysisResult) Unmarshal(in []byte) error {
	msg := new(v1.GetVolumeAnalysisResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVolumeAnalysisResult) GetSuccess() *v1.GetVolumeAnalysisResponse {
	if !p.IsSetSuccess() {
		return GetVolumeAnalysisResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVolumeAnalysisResult) SetSuccess(x interface{}) {
	p.Success = x.(*v1.GetVolumeAnalysisResponse)
}

func (p *GetVolumeAnalysisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVolumeAnalysisResult) GetResult() interface{} {
	return p.Success
}

func getMarketVolumeFluctuationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(v1.GetMarketVolumeFluctuationRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(cryptov1.CryptoVolumeService).GetMarketVolumeFluctuation(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMarketVolumeFluctuationArgs:
		success, err := handler.(cryptov1.CryptoVolumeService).GetMarketVolumeFluctuation(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMarketVolumeFluctuationResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMarketVolumeFluctuationArgs() interface{} {
	return &GetMarketVolumeFluctuationArgs{}
}

func newGetMarketVolumeFluctuationResult() interface{} {
	return &GetMarketVolumeFluctuationResult{}
}

type GetMarketVolumeFluctuationArgs struct {
	Req *v1.GetMarketVolumeFluctuationRequest
}

func (p *GetMarketVolumeFluctuationArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMarketVolumeFluctuationArgs) Unmarshal(in []byte) error {
	msg := new(v1.GetMarketVolumeFluctuationRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMarketVolumeFluctuationArgs_Req_DEFAULT *v1.GetMarketVolumeFluctuationRequest

func (p *GetMarketVolumeFluctuationArgs) GetReq() *v1.GetMarketVolumeFluctuationRequest {
	if !p.IsSetReq() {
		return GetMarketVolumeFluctuationArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMarketVolumeFluctuationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMarketVolumeFluctuationArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMarketVolumeFluctuationResult struct {
	Success *v1.GetMarketVolumeFluctuationResponse
}

var GetMarketVolumeFluctuationResult_Success_DEFAULT *v1.GetMarketVolumeFluctuationResponse

func (p *GetMarketVolumeFluctuationResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMarketVolumeFluctuationResult) Unmarshal(in []byte) error {
	msg := new(v1.GetMarketVolumeFluctuationResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMarketVolumeFluctuationResult) GetSuccess() *v1.GetMarketVolumeFluctuationResponse {
	if !p.IsSetSuccess() {
		return GetMarketVolumeFluctuationResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMarketVolumeFluctuationResult) SetSuccess(x interface{}) {
	p.Success = x.(*v1.GetMarketVolumeFluctuationResponse)
}

func (p *GetMarketVolumeFluctuationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMarketVolumeFluctuationResult) GetResult() interface{} {
	return p.Success
}

func getVolumeComparisonHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(v1.GetVolumeComparisonRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(cryptov1.CryptoVolumeService).GetVolumeComparison(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetVolumeComparisonArgs:
		success, err := handler.(cryptov1.CryptoVolumeService).GetVolumeComparison(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetVolumeComparisonResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetVolumeComparisonArgs() interface{} {
	return &GetVolumeComparisonArgs{}
}

func newGetVolumeComparisonResult() interface{} {
	return &GetVolumeComparisonResult{}
}

type GetVolumeComparisonArgs struct {
	Req *v1.GetVolumeComparisonRequest
}

func (p *GetVolumeComparisonArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetVolumeComparisonArgs) Unmarshal(in []byte) error {
	msg := new(v1.GetVolumeComparisonRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetVolumeComparisonArgs_Req_DEFAULT *v1.GetVolumeComparisonRequest

func (p *GetVolumeComparisonArgs) GetReq() *v1.GetVolumeComparisonRequest {
	if !p.IsSetReq() {
		return GetVolumeComparisonArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetVolumeComparisonArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetVolumeComparisonArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetVolumeComparisonResult struct {
	Success *v1.GetVolumeComparisonResponse
}

var GetVolumeComparisonResult_Success_DEFAULT *v1.GetVolumeComparisonResponse

func (p *GetVolumeComparisonResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetVolumeComparisonResult) Unmarshal(in []byte) error {
	msg := new(v1.GetVolumeComparisonResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetVolumeComparisonResult) GetSuccess() *v1.GetVolumeComparisonResponse {
	if !p.IsSetSuccess() {
		return GetVolumeComparisonResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetVolumeComparisonResult) SetSuccess(x interface{}) {
	p.Success = x.(*v1.GetVolumeComparisonResponse)
}

func (p *GetVolumeComparisonResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetVolumeComparisonResult) GetResult() interface{} {
	return p.Success
}

func getTopVolumeCoinsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(v1.GetTopVolumeCoinsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(cryptov1.CryptoVolumeService).GetTopVolumeCoins(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetTopVolumeCoinsArgs:
		success, err := handler.(cryptov1.CryptoVolumeService).GetTopVolumeCoins(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTopVolumeCoinsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetTopVolumeCoinsArgs() interface{} {
	return &GetTopVolumeCoinsArgs{}
}

func newGetTopVolumeCoinsResult() interface{} {
	return &GetTopVolumeCoinsResult{}
}

type GetTopVolumeCoinsArgs struct {
	Req *v1.GetTopVolumeCoinsRequest
}

func (p *GetTopVolumeCoinsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetTopVolumeCoinsArgs) Unmarshal(in []byte) error {
	msg := new(v1.GetTopVolumeCoinsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTopVolumeCoinsArgs_Req_DEFAULT *v1.GetTopVolumeCoinsRequest

func (p *GetTopVolumeCoinsArgs) GetReq() *v1.GetTopVolumeCoinsRequest {
	if !p.IsSetReq() {
		return GetTopVolumeCoinsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTopVolumeCoinsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetTopVolumeCoinsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetTopVolumeCoinsResult struct {
	Success *v1.GetTopVolumeCoinsResponse
}

var GetTopVolumeCoinsResult_Success_DEFAULT *v1.GetTopVolumeCoinsResponse

func (p *GetTopVolumeCoinsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetTopVolumeCoinsResult) Unmarshal(in []byte) error {
	msg := new(v1.GetTopVolumeCoinsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTopVolumeCoinsResult) GetSuccess() *v1.GetTopVolumeCoinsResponse {
	if !p.IsSetSuccess() {
		return GetTopVolumeCoinsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTopVolumeCoinsResult) SetSuccess(x interface{}) {
	p.Success = x.(*v1.GetTopVolumeCoinsResponse)
}

func (p *GetTopVolumeCoinsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTopVolumeCoinsResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetVolumeAnalysis(ctx context.Context, Req *v1.GetVolumeAnalysisRequest) (r *v1.GetVolumeAnalysisResponse, err error) {
	var _args GetVolumeAnalysisArgs
	_args.Req = Req
	var _result GetVolumeAnalysisResult
	if err = p.c.Call(ctx, "GetVolumeAnalysis", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMarketVolumeFluctuation(ctx context.Context, Req *v1.GetMarketVolumeFluctuationRequest) (r *v1.GetMarketVolumeFluctuationResponse, err error) {
	var _args GetMarketVolumeFluctuationArgs
	_args.Req = Req
	var _result GetMarketVolumeFluctuationResult
	if err = p.c.Call(ctx, "GetMarketVolumeFluctuation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVolumeComparison(ctx context.Context, Req *v1.GetVolumeComparisonRequest) (r *v1.GetVolumeComparisonResponse, err error) {
	var _args GetVolumeComparisonArgs
	_args.Req = Req
	var _result GetVolumeComparisonResult
	if err = p.c.Call(ctx, "GetVolumeComparison", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTopVolumeCoins(ctx context.Context, Req *v1.GetTopVolumeCoinsRequest) (r *v1.GetTopVolumeCoinsResponse, err error) {
	var _args GetTopVolumeCoinsArgs
	_args.Req = Req
	var _result GetTopVolumeCoinsResult
	if err = p.c.Call(ctx, "GetTopVolumeCoins", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
